import com.google.common.io.Files
import com.jayway.awaitility.Awaitility
import com.jayway.restassured.RestAssured
import com.jayway.restassured.response.Response
import org.arquillian.spacelift.execution.Tasks
import org.arquillian.spacelift.gradle.*
import org.arquillian.spacelift.gradle.container.*
import org.arquillian.spacelift.gradle.git.*
import org.arquillian.spacelift.gradle.maven.*
import org.arquillian.spacelift.gradle.openshift.*
import org.arquillian.spacelift.gradle.cordova.CordovaExecutor
import org.arquillian.spacelift.process.CommandBuilder
import org.arquillian.spacelift.process.ProcessInteractionBuilder
import org.arquillian.spacelift.process.ProcessResult
import org.arquillian.spacelift.process.impl.CommandTool
import org.arquillian.spacelift.tool.basic.DownloadTool
import org.arquillian.spacelift.tool.io.WriteToFileTool
import org.jboss.aerogear.unifiedpush.api.*
import org.jboss.aerogear.test.container.manager.JBossManagerConfiguration
import org.jboss.aerogear.test.container.manager.configuration.ContainerType
import org.jboss.aerogear.test.container.spacelift.*
import org.jboss.aerogear.test.Session
import org.jboss.aerogear.test.api.auth.*
import org.jboss.aerogear.test.api.application.*
import org.jboss.aerogear.test.api.variant.android.*
import org.jboss.shrinkwrap.resolver.api.maven.ConfigurableMavenResolverSystem
import org.jboss.shrinkwrap.resolver.api.maven.Maven
import org.jboss.shrinkwrap.resolver.api.maven.repository.MavenRemoteRepositories
import groovy.json.JsonOutput

import java.util.concurrent.Callable
import java.util.concurrent.TimeUnit

apply plugin: 'spacelift'

ext {
    defaultOpenShiftAppName = 'upsintegrationtests'
    defaultOpenShiftNamespace = 'mobileqa'
    defaultOpenShiftGearSize = 'small'
    defaultOpenShiftUsername = ''
    defaultOpenShiftPassword = ''
    defaultOpenShiftAppDirectory = 'unified-push'
    defaultOpenShiftCartridge = 'https://raw.githubusercontent.com/jboss-mobile/jboss-unified-push-openshift-cartridge/master/metadata/manifest.yml'

    defaultUnifiedPushSource = 'repository'
    defaultUnifiedPushMavenRepository = 'http://dl.bintray.com/aerogear/AeroGear-UnifiedPush/'

    defaultEap6Version = '6.3.0'
    defaultEap6FileName = "jboss-eap-${defaultEap6Version}.zip"
    defaultEap6RemoteUrl = ''

    defaultProtocols = [ 'http' ]

    defaultUnifiedPushType = 'as7'
    defaultUnifiedPushServerWar = null
    defaultUnifiedPushAuthServerWar = null
    defaultUnifiedPushServerDatasource = null

    defaultJbossDomainMode = false
    defaultJbossHome = null
    defaultJbossContainer = ContainerType.EAP
    defaultJbossBindAddress = '127.0.0.1'
    defaultLocalDomain = '127.0.0.1'

    // We need to exclude APNS and GCMforChrome until it is fixed in proxy.
    // If there is problem, you can exclude category.GCM as well
    defaultExternalMavenParameters = "-DexcludedGroups=category.AdminUI,category.Performance,category.APNS,category.ChromePackagedApp"

    defaultGoogleProjectNumber = ''
    defaultGoogleKey = ''
    defaultUnifiedPushBinariesDir = new File(project.rootDir, 'spacelift/upsBin')
}

spacelift {
    workspace = new File(project.rootDir, 'spacelift/workspace')
    installationsDir = new File(project.rootDir, 'spacelift/cache')

    tools {
        rhc {
            command 'rhc'
        }
        mvn {
            command {
                def m2 = System.getenv("M2")
                def m2_home = System.getenv("M2_HOME")
                def quietParameters = System.getenv("TRAVIS") != null ? ["-B", "-q"] : []

                if (m2 != null && !m2.isEmpty()
                ) {
                    return new CommandBuilder("${m2}/mvn").parameters(quietParameters)
                } else if (m2_home != null && !m2_home.isEmpty()) {
                    return new CommandBuilder("${m2_home}/bin/mvn").parameters(quietParameters)
                } else {
                    return new CommandBuilder("mvn").parameters(quietParameters)
                }
            }
        }
    }

    profiles {
        openshift {
            enabledInstallations 'littleProxy', 'aerogearTestingTools', 'unifiedPushServerOpenshift'
            tests 'openshiftIntegrationTests'
        }
        local {
            tests 'localIntegrationTests'
        }
        eap6(inherits: local) {
            enabledInstallations {
                ['littleProxy', 'aerogearTestingTools', 'eap6Container', "unifiedPushServer_${project.unifiedPushSource}"]
            }
        }
        wildfly8(inherits: local) {
            enabledInstallations {
                ['littleProxy', 'aerogearTestingTools', 'wildfly8Container', "unifiedPushServer_${project.unifiedPushSource}"]
            }
        }

        externalEap6(inherits: local) {
            enabledInstallations {
                ['littleProxy', 'aerogearTestingTools', "unifiedPushServer_${project.unifiedPushSource}"]
            }
        }

        quickstarts {
            enabledInstallations 'littleProxy', 'aerogearTestingTools', 'unifiedPushServerOpenshift', 'helloworldCordovaQuickstart'
            tests 'quickstartIntegrationTests'
        }
    }

    installations {
        littleProxy {
            product 'aerogear'
            version '1.1.0-beta1-SNAPSHOT'
            remoteUrl 'https://github.com/adamfisk/LittleProxy/archive/696e3a87a64e9ede019e68312e0c8f9674d1b2a8.zip'
            home 'littleproxy'
            fileName 'littleproxy.zip'
            extractMapper { toDir(home).cutdirs() }
            postActions {
                GradleSpacelift.tools('mvn')
                        .workingDir(littleProxy.home.absolutePath)
                        .parameters('clean', 'install')
                        .interaction(new ProcessInteractionBuilder().when(".*").printToOut())
                        .execute().await()
            }
        }

        aerogearTestingTools {
            product 'aerogear'
            version '1.0.2'
            remoteUrl 'https://github.com/aerogear/aerogear-testing-tools/archive/master.zip'
            home 'aerogear-testing-tools'
            fileName 'aerogear-testing-tools.zip'
            extractMapper { toDir(home).cutdirs() }
            postActions {
                GradleSpacelift.tools('mvn')
                        .workingDir(new File(home, 'unifiedpush-test-extension').absolutePath)
                        .parameters('clean', 'install')
                        .interaction(new ProcessInteractionBuilder().when(".*").printToOut())
                        .execute().await()
            }
        }

        wildfly8Container {
            product { 'jboss' }
            version { '8.2.0' }
            fileName { 'wildfly-8.2.0.Final.zip' }
            remoteUrl { 'http://download.jboss.org/wildfly/8.2.0.Final/wildfly-8.2.0.Final.zip' }
            home { 'wildfly-8.2.0.Final' }
            extractMapper { toDir(home).cutdirs() }
            isInstalled {
                project.jbossHome = home
                project.jbossContainer = ContainerType.WILDFLY
                project.unifiedPushType = 'wildfly'

                // There seems to be an error on subsequent runs with the keycloak-default persistence unit
                // so we reinstall each time.
                return false
            }
            postActions {
                project.ant.chmod(dir: "${home}/bin", perm: "a+x", includes: "**/*.sh")
            }
        }

        eap6Container {
            product 'eap'
            version { project.eap6Version }
            fileName { project.eap6FileName }
            remoteUrl { project.eap6RemoteUrl }
            extractMapper { toDir(home).cutdirs() }
            isInstalled {
                project.jbossHome = home
                project.jbossContainer = ContainerType.EAP
                project.unifiedPushType = 'as7'

                return home.exists()
            }
            postActions {
                project.ant.chmod(dir: "${home}/bin", perm: "a+x", includes: "**/*.sh")
            }
        }

        unifiedPushServerOpenshift {
            product 'aerogear'
            version '1.0.2'
            postActions {
                def repository = File.createTempDir()
                println "Created temporary directory: $repository."

                println 'Creating OpenShift cartridge.'
                Tasks.prepare(CreateOpenshiftCartridge)
                        .named(project.openShiftAppName)
                        .at(project.openShiftNamespace)
                        .sized(project.openShiftGearSize)
                        .username(project.openShiftUsername)
                        .password(project.openShiftPassword)
                        .cartridges(project.openShiftCartridge)
                        .force()
                        .checkout()
                        .repo(repository.absolutePath)
                        .execute().await()

                ProcessResult ipGetResult = GradleSpacelift.tools('rhc')
                        .parameters('ssh')
                        .parameters('--command', 'echo $OPENSHIFT_UNIFIED_PUSH_IP$OPENSHIFT_AEROGEAR_PUSH_IP$OPENSHIFT_JBOSS_UNIFIED_PUSH_IP$MYTESTIP_1')
                        .parameters('-a', project.openShiftAppName)
                        .parameters('-n', project.openShiftNamespace)
                        .parameters('-l', project.openShiftUsername)
                        .parameters('-p', project.openShiftPassword)
                        .execute().await()

                String ip = ipGetResult.output().last()

                GradleSpacelift.tools('rhc')
                        .parameters('set-env', "JAVA_OPTS_EXT=-Dhttp.proxyHost=$ip -Dhttp.proxyPort=16000 -Dhttps.proxyHost=$ip -Dhttps.proxyPort=16000")
                        .parameters('-a', project.openShiftAppName)
                        .parameters('-n', project.openShiftNamespace)
                        .parameters('-l', project.openShiftUsername)
                        .parameters('-p', project.openShiftPassword)
                        .execute().await()

                def deployFile = "mv ~/app-root/repo/unifiedpush-test-extension-server.war ~/${project.openShiftAppDirectory}/standalone/deployments/unifiedpush-test-extension-server.war"

                def actionHooksDir = new File(repository, '.openshift/action_hooks/')
                actionHooksDir.mkdirs()

                List<File> addedFiles = Tasks.prepare(WriteToFileTool)
                        .write(deployFile)
                        .to(new File(actionHooksDir, 'deploy'))
                        .execute().await()

                def warFileSource = new File('aerogear-testing-tools/unifiedpush-test-extension/unifiedpush-test-extension-server/target/unifiedpush-test-extension-server.war')
                def warFileTarget = new File(repository, 'unifiedpush-test-extension-server.war')

                Files.copy(warFileSource, warFileTarget)

                Tasks.chain(repository, GitAddTool)
                        .add(addedFiles)
                        .add(warFileTarget)
                        .execute().await()

                addedFiles.each { addedFile ->
                    Tasks.prepare(CommandTool.class)
                            .workingDir(repository.absolutePath)
                            .programName('git')
                            .parameters('update-index', '--chmod=+x', addedFile.absolutePath)
                            .interaction(new ProcessInteractionBuilder().when(".*").printToOut())
                            .execute().await()
                }

                println 'Pushing the unifiedpush-test-extension-server.war into the repository.'
                Tasks.chain(repository, GitCommitTool)
                        .message('Add test extension war.')
                        .then(GitPushTool)
                        .execute().await()

                final String baseUri = "https://${project.openShiftAppName}-${project.openShiftNamespace}.rhcloud.com/unifiedpush-test-extension-server"

                println 'Waiting for unifiedpush-test-extension-server to be deployed. (max 5 minutes)'
                println "Expected deployment url: $baseUri"
                Awaitility.await().atMost(5, TimeUnit.MINUTES).pollInterval(5, TimeUnit.SECONDS).until(new Callable<Boolean>() {
                    @Override
                    Boolean call() throws Exception {
                        Response response = RestAssured.given()
                                .baseUri(baseUri)
                                .get('/status')

                        return response.statusCode == 200
                    }
                })
                println 'The unifiedpush-test-extension-server.war was successfully deployed.'

                Awaitility.await().atMost(5, TimeUnit.MINUTES).pollInterval(10, TimeUnit.SECONDS).until(new Callable<Boolean>() {
                    @Override
                    Boolean call() throws Exception {
                        Response response = RestAssured.given()
                                .baseUri(baseUri)
                                .get('/keycloak/realms')

                        response.then().log().all(true)

                        List<String> result = response.as(List.class)

                        return result.contains("aerogear")
                    }
                })

                println 'Reconfiguring KeyCloak.'
                RestAssured.given()
                        .baseUri(baseUri)
                        .get('/keycloak')
                        .then()
                        .log().all(true)
                        .statusCode(200)

                println 'Restaring the cartridge.'
                GradleSpacelift.tools('rhc')
                        .parameters('app', 'restart')
                        .parameters('-a', project.openShiftAppName)
                        .parameters('-n', project.openShiftNamespace)
                        .parameters('-l', project.openShiftUsername)
                        .parameters('-p', project.openShiftPassword)
                        .execute().await()

                println 'Waiting for unifiedpush-test-extension-server to be deployed. (max 5 minutes)'
                println "Expected deployment url: $baseUri"
                Awaitility.await().atMost(5, TimeUnit.MINUTES).pollInterval(5, TimeUnit.SECONDS).until(new Callable<Boolean>() {
                    @Override
                    Boolean call() throws Exception {
                        Response response = RestAssured.given()
                                .baseUri(baseUri)
                                .get('/status')

                        return response.statusCode == 200
                    }
                })
                println 'The unifiedpush-test-extension-server.war was successfully deployed.'

            }
        }

        unifiedPushServer_repository {
            product 'aerogear'
            version '1.0.2'
            remoteUrl 'https://github.com/aerogear/aerogear-unifiedpush-server/archive/1.0.2.zip'
            home 'aerogear-unifiedpush-server'
            fileName 'aerogear-unifiedpush-server.zip'
            extractMapper { toDir(home).cutdirs() }
            postActions {
                GradleSpacelift.tools('mvn')
                        .workingDir(home.absolutePath)
                        .parameters('clean', 'package', '-DskipTests', '-Dmaven.javadoc.skip=true')
                        .interaction(new ProcessInteractionBuilder().when(".*").printToOut())
                        .execute().await()

                project.unifiedPushBinariesDir.mkdirs()

                Tasks.prepare(DownloadTool.class)
                        .from('https://raw.githubusercontent.com/aerogear/aerogear-unifiedpush-server/master/databases/unifiedpush-h2-ds.xml')
                        .to(new File(project.unifiedPushBinariesDir, 'unifiedpush-h2-ds.xml'))
                        .execute().await()

                Files.copy(
                        new File(home, 'servers/auth-server/target/auth-server.war'),
                        new File(project.unifiedPushBinariesDir, 'auth-server.war'))

                Files.copy(
                        new File(home, 'servers/ups-as7/target/ag-push.war'),
                        new File(project.unifiedPushBinariesDir, 'as7-ag-push.war'))

                Files.copy(
                        new File(home, 'servers/ups-wildfly/target/ag-push.war'),
                        new File(project.unifiedPushBinariesDir, 'wildfly-ag-push.war'))


            }
        }

        unifiedPushServer_maven {
            product 'aerogear'
            version '1.0.2'
            postActions {
                final authServerCanonicalCoordinate = "org.jboss.aerogear.unifiedpush:unifiedpush-auth-server:war:${version}"
                final upsAs7CanonicalCoordinate = "org.jboss.aerogear.unifiedpush:unifiedpush-server-as7:war:${version}"
                final upsWildFlyCanonicalCoordinate = "org.jboss.aerogear.unifiedpush:unifiedpush-server-wildfly:war:${version}"

                ConfigurableMavenResolverSystem resolver = Maven.configureResolver()
                        .withRemoteRepo(MavenRemoteRepositories
                        .createRemoteRepository('remote_ups', project.unifiedPushMavenRepository, 'default'))
                        .withMavenCentralRepo(false)

                project.unifiedPushBinariesDir.mkdirs()

                Tasks.prepare(DownloadTool.class)
                        .from('https://raw.githubusercontent.com/aerogear/aerogear-unifiedpush-server/master/databases/unifiedpush-h2-ds.xml')
                        .to(new File(project.unifiedPushBinariesDir, 'unifiedpush-h2-ds.xml'))
                        .execute().await()

                Files.copy(
                        resolver.resolve(authServerCanonicalCoordinate).withoutTransitivity().asSingleFile(),
                        new File(project.unifiedPushBinariesDir, 'auth-server.war'))

                Files.copy(
                        resolver.resolve(upsAs7CanonicalCoordinate).withoutTransitivity().asSingleFile(),
                        new File(project.unifiedPushBinariesDir, 'as7-ag-push.war'))

                Files.copy(
                        resolver.resolve(upsWildFlyCanonicalCoordinate).withoutTransitivity().asSingleFile(),
                        new File(project.unifiedPushBinariesDir, 'wildfly-ag-push.war'))
            }
        }

        /**
         * Purpose of this is to enable running against previously downloaded wars.
         */
        unifiedPushServer_none {
            product 'aerogear'
            version '1.0.2'
            postActions {
                project.unifiedPushBinariesDir.mkdirs()

                if (project.unifiedPushServerWar != null) {
                    Files.copy(
                            new File(project.unifiedPushServerWar),
                            new File(project.unifiedPushBinariesDir, "${project.unifiedPushType}-ag-push.war")
                    )
                }
                if (project.unifiedPushAuthServerWar != null) {
                    Files.copy(
                            new File(project.unifiedPushAuthServerWar),
                            new File(project.unifiedPushBinariesDir, 'auth-server.war')
                    )
                }
                if (project.unifiedPushServerDatasource != null) {
                    Files.copy(
                            new File(project.unifiedPushServerDatasource),
                            new File(project.unifiedPushBinariesDir, 'unifiedpush-h2-ds.xml')
                    )
                }
            }
        }

        deployUnifiedPushToContainer {
            product 'aerogear'
            version '1.0.2'
            postActions {
                project.unifiedPushType
            }
        }

        helloworldCordovaQuickstart {
            product 'aerogear'
            version '1.0.1'

            home "aerogear-push-helloworld-${version}"
            remoteUrl "https://github.com/aerogear/aerogear-push-helloworld/archive/${version}.zip"

            extractMapper {
                toDir(home).cutdirs()
            }

            postActions {
                def authUrl = "https://${project.openShiftAppName}-${project.openShiftNamespace}.rhcloud.com/auth"
                def pushUrl = "https://${project.openShiftAppName}-${project.openShiftNamespace}.rhcloud.com/ag-push"
                def cordovaDir = "${home}/cordova"
                def pushConfigFile = new File("${cordovaDir}/www/push-config.json")

                Session session = LoginRequest.request()
                        .username("admin")
                        .password("123")
                        .setAuthServerUrl(new URL(authUrl))
                        .setUnifiedPushServerUrl(new URL(pushUrl))
                        .login()

                PushApplication pushApplication = PushApplicationWorker.worker()
                        .createContext(session, null)
                        .generate()
                        .persist()
                        .detachEntity()

                AndroidVariant variant = AndroidVariantWorker.worker()
                        .createContext(session, pushApplication)
                        .generate()
                        .projectNumber(project.googleProjectNumber)
                        .googleKey(project.googleKey)
                        .persist()
                        .detachEntity()

                def jsonConfig = JsonOutput.toJson(
                        [
                                pushServerURL: pushUrl,
                                android:
                                        [
                                                senderId: project.googleProjectNumber,
                                                variantId: variant.getVariantID(),
                                                variantSecret: variant.getSecret()
                                        ]
                        ]
                )

                pushConfigFile.text = jsonConfig

                Tasks.prepare(CordovaExecutor)
                        .setDir(cordovaDir)
                        .setParameters('platform add android')
                        .execute().await()

                Tasks.prepare(CordovaExecutor)
                        .setDir(cordovaDir)
                        .setParameters("plugin add org.jboss.aerogear.cordova.push")
                        .execute().await()

                Tasks.prepare(CordovaExecutor)
                        .setDir(cordovaDir)
                        .setParameters('build android')
                        .execute().await()
            }
        }
    }

    tests {
        openshiftIntegrationTests {
            execute {
                def baseUri = "$https://${project.openShiftAppName}-${project.openShiftNamespace}.rhcloud.com:443";

                Tasks.prepare(MavenExecutor).pom("pom.xml")
                        .profile('openshift')
                        .property("http.ignore=true")
                        .property("containerUri=$baseUri")
                        .property("keystore.ignore=true")
                        .goals('clean', 'test').execute().await()
            }
        }
        localIntegrationTests {
            dataProvider {
                project.protocols
            }
            beforeSuite {
                def jbossHome = project.jbossHome
                if (jbossHome instanceof CharSequence) {
                    jbossHome = new File(jbossHome)
                }
                final def baseUri = "http://${project.localDomain}:8080/unifiedpush-test-extension-server"
                final def jbossManagerConfiguration = new JBossManagerConfiguration()
                        .setContainerType(project.jbossContainer)
                        .setJBossHome(jbossHome.absolutePath)
                        .setStartupTimeoutInSeconds(600)

                def deploymentGroups = ""
                def undeploymentGroups = ""
                if (project.jbossDomainMode) {
                    def javaOpts = jbossManagerConfiguration.getProcessControllerJavaOpts()
                    javaOpts += " -Djboss.bind.address=${project.jbossBindAddress}"
                    javaOpts += " -Dhttp.proxyHost=${project.jbossBindAddress} -Dhttp.proxyPort=16000"
                    javaOpts += " -Dhttps.proxyHost=${project.jbossBindAddress} -Dhttps.proxyPort=16000"
                    jbossManagerConfiguration.domain().setProcessControllerJavaOpts(javaOpts)
                    deploymentGroups = " --all-server-groups"
                    undeploymentGroups = " --all-relevant-server-groups"
                } else {
                    def javaOpts = jbossManagerConfiguration.getJavaOpts()
                    javaOpts += " -Djboss.bind.address=${project.jbossBindAddress}"
                    javaOpts += " -Dhttp.proxyHost=${project.jbossBindAddress} -Dhttp.proxyPort=16000"
                    javaOpts += " -Dhttps.proxyHost=${project.jbossBindAddress} -Dhttps.proxyPort=16000"
                    javaOpts += " -Djavax.net.ssl.trustStore=setup/aerogear.truststore"
                    javaOpts += " -Djavax.net.ssl.trustStorePassword=aerogear"
                    javaOpts += " -DgcmMockCrt=aerogear-testing-tools/unifiedpush-test-extension/sslcert/gcm_mock.crt"
                    javaOpts += " -DgcmMockKey=aerogear-testing-tools/unifiedpush-test-extension/sslcert/gcm_mock.key" 
                    jbossManagerConfiguration.setJavaOpts(javaOpts)
                }

                // Remove all current deployments
                File deployments = new File(jbossHome, 'standalone/deployments')
                if (project.jbossDomainMode) {
                    deployments = new File(jbossHome, 'domain/deployments')
                }
                deployments.listFiles().each { file ->
                    file.delete()
                }

                project.ext.jbossManager = Tasks.prepare(JBossStarter)
                        .configuration(jbossManagerConfiguration)
                        .execute().await()

                // We need the try-catches because there doesn't seem to be a way to ignore the 1 output from jboss-cli
                try {
                    println 'Undeploying unifiedpush-h2-ds.xml'
                    Tasks.prepare(JBossCLI)
                            .environment("JBOSS_HOME", jbossHome.absolutePath)
                            .connect()
                            .cliCommand("undeploy unifiedpush-h2-ds.xml${undeploymentGroups}")
                            .execute().await()

                    println 'unifiedpush-h2-ds.xml undeployed successfully'
                } catch (Exception e) {
                    println 'unifiedpush-h2-ds.xml undeploy failed'
                }

                try {
                    println 'Undeploying auth-server.war'
                    Tasks.prepare(JBossCLI)
                            .environment("JBOSS_HOME", jbossHome.absolutePath)
                            .connect()
                            .cliCommand("undeploy auth-server.war${undeploymentGroups}")
                            .execute().await()

                    println 'auth-server.war undeployed successfully'
                } catch (Exception e) {
                    println 'auth-server.war undeploy failed'
                }

                try {
                    println "Undeploying ${project.unifiedPushType}-ag-push.war"
                    Tasks.prepare(JBossCLI)
                            .environment("JBOSS_HOME", jbossHome.absolutePath)
                            .connect()
                            .cliCommand("undeploy ${project.unifiedPushType}-ag-push.war${undeploymentGroups}")
                            .execute().await()

                    println "${project.unifiedPushType}-ag-push.war undeployed successfully"
                } catch (Exception e) {
                    println "${project.unifiedPushType}-ag-push.war undeploy failed"
                }

                try {
                    println 'Undeploying unifiedpush-test-extension-server.war'
                    Tasks.prepare(JBossCLI)
                            .environment("JBOSS_HOME", jbossHome.absolutePath)
                            .connect()
                            .cliCommand("undeploy unifiedpush-test-extension-server.war${undeploymentGroups}")
                            .execute().await()

                    println 'unifiedpush-test-extension-server.war undeployed successfully'
                } catch (Exception e) {
                    println 'unifiedpush-test-extension-server.war undeploy failed'
                }

                Tasks.prepare(JBossCLI)
                        .environment("JBOSS_HOME", jbossHome.absolutePath)
                        .connect()
                        .cliCommand("deploy ${new File(project.unifiedPushBinariesDir, 'unifiedpush-h2-ds.xml').absolutePath}${deploymentGroups}")
                        .then(JBossCLI)
                        .environment("JBOSS_HOME", jbossHome.absolutePath)
                        .connect()
                        .cliCommand("deploy ${new File(project.unifiedPushBinariesDir, 'auth-server.war').absolutePath}${deploymentGroups}")
                        .then(JBossCLI)
                        .environment("JBOSS_HOME", jbossHome.absolutePath)
                        .connect()
                        .cliCommand("deploy ${new File(project.unifiedPushBinariesDir, "${project.unifiedPushType}-ag-push.war").absolutePath}${deploymentGroups}")
                        .then(JBossCLI)
                        .environment("JBOSS_HOME", jbossHome.absolutePath)
                        .connect()
                        .cliCommand("deploy ${new File(aerogearTestingTools.home, 'unifiedpush-test-extension/unifiedpush-test-extension-server/target/unifiedpush-test-extension-server.war').absolutePath}${deploymentGroups}")
                        .execute().await()

                println 'Waiting for unifiedpush-test-extension-server to be deployed. (max 5 minutes)'
                println "Expected deployment url: $baseUri"
                Awaitility.await().atMost(5, TimeUnit.MINUTES).pollInterval(5, TimeUnit.SECONDS).until(new Callable<Boolean>() {
                    @Override
                    Boolean call() throws Exception {
                        Response response = RestAssured.given()
                                .baseUri(baseUri)
                                .get('/status')

                        return response.statusCode == 200
                    }
                })
                println 'The unifiedpush-test-extension-server.war was successfully deployed.'

                println 'Reconfiguring KeyCloak.'
                RestAssured.given()
                        .baseUri(baseUri)
                        .get('/keycloak')
                        .then()
                        .log().all(true)
                        .statusCode(200)

                println 'Restarting container.'
                Tasks.chain(project.jbossManager, JBossStopper).execute().await()

                project.ext.jbossManager = Tasks.prepare(JBossStarter)
                        .configuration(jbossManagerConfiguration)
                        .execute().await()

                println 'Waiting for unifiedpush-test-extension-server to be deployed. (max 5 minutes)'
                println "Expected deployment url: $baseUri"
                Awaitility.await().atMost(5, TimeUnit.MINUTES).pollInterval(5, TimeUnit.SECONDS).until(new Callable<Boolean>() {
                    @Override
                    Boolean call() throws Exception {
                        Response response = RestAssured.given()
                                .baseUri(baseUri)
                                .get('/status')

                        return response.statusCode == 200
                    }
                })
                println 'The unifiedpush-test-extension-server.war was successfully deployed.'
            }
            execute { protocol ->
                def port = protocol == 'https' ? 8443 : 8080
                def baseUri = "$protocol://${project.localDomain}:$port"

                println "Using external maven parameters: ${project.externalMavenParameters}"

                GradleSpacelift.tools('mvn')
                        .parameters('-Popenshift', "-DcontainerUri=$baseUri", 'clean', 'test')
                        .interaction(new ProcessInteractionBuilder().when(".*").printToOut())
                        .parameters(new CommandBuilder('unused').splitToParameters(project.externalMavenParameters).build().getParameters())
                        .execute().await()

                /*Tasks.prepare(MavenExecutor).pom("pom.xml")
                        .profile('openshift')
                        .property("containerUri=$baseUri")
                        .goals('clean', 'test')
                        .execute().await()*/
            }
            afterSuite {
                Tasks.chain(project.jbossManager, JBossStopper).execute().await()
            }
        }

        quickstartIntegrationTests {
            execute {
                Tasks.prepare(MavenExecutor).pom("pom.xml")
                        .profile('quickstarts')
                        .goals('clean', 'test').execute().await()
            }
        }
    }
}

// build dependencies
buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        // you need this only if you plan to use SNAPSHOT version of this plugin
        maven {
            name 'jboss-staging-repository-group'
            url 'https://repository.jboss.org/nexus/content/groups/staging'
        }
    }
    dependencies {
        classpath 'org.arquillian.spacelift.gradle:arquillian-spacelift-gradle:1.0.0-alpha-5'
        classpath 'org.jboss.aerogear.test:aerogear-ups-rest-api:1.0.2'
        classpath 'org.jboss.aerogear.test:spacelift-jboss-manager:0.5.0'
        classpath 'org.arquillian.spacelift.gradle:arquillian-spacelift-gradle:1.0.0-alpha-6'
        classpath 'com.jayway.restassured:rest-assured:2.4.0'
        classpath 'com.jayway.awaitility:awaitility-groovy:1.6.2'
        classpath 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
    }
}

// these elements are needed only if you are willing to use _testreport_ task
repositories {
    mavenLocal()
    mavenCentral()
}

configurations {
    junitreport
}

dependencies {
    junitreport 'org.apache.ant:ant-junit:1.9.4'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2'
}
